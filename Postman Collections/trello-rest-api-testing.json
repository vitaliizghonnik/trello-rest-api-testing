{
	"info": {
		"_postman_id": "532f1e8e-2b13-413a-a4eb-ae779f08e2d2",
		"name": "trello-rest-api-testing",
		"description": "## Introduction\n\nTrello is a web-based, list-making application and famous project management tool used to manage projects, organize tasks and build team collaboration. The major idea of creating this collection _trello-rest-api-testing_ in Postman is to test the main functionality that the Trello application allows us to do such as create/get/delete boards, create/get lists, create/get/update/move cards, add new member/comment to a card, create a checklist on a card.\n\nEach request is tested with regards to testing status code, response body, headers, cookies.\n\nThis collection includes two folders: happy path testing and negative testing. _Happy path testing_ is executed to verify that the Trello application is working according to the specified requirements by providing valid _test_ data provided by the Trello developer team with [the Trello REST API documentation](https://developer.atlassian.com/cloud/trello/rest/api-group-actions/). On the other hand negative testing folder consists of requests that ensure that the Trello application can gracefully handle invalid input or unexpected user behavior.\n\n## Getting started\n\nBefore to start sending requests to the Trello REST API check out and familiar with the [API Introduction](https://developer.atlassian.com/cloud/trello/guides/rest-api/api-introduction/#authentication-and-authorization) first to understand better what is the possibilities which Trello allows us to build.\n\n1. Creat a Trello Power-Up\n    \n\nTrello uses a delegated authentication and authorization flow, that means no usernames and passwords using there. Instead of it, to get started is needed to generate an API key. To do it you first need to have created Trello Power-Up. In this case check out [Managing Power-Up](https://developer.atlassian.com/cloud/trello/guides/power-ups/managing-power-ups/).\n\n2\\. Generate a new API key\n\nOnce you already have created a Power-Up you can [generate a new API key.](https://trello.com/power-ups/admin)\n\n3\\. Generate a Token access\n\nOn the same page where you found an API key at the right of it you can see the hyperlinked \"Token\" also known as a Secret. Follow this instruction: [https://developer.atlassian.com/cloud/trello/guides/rest-api/api-introduction/#authentication-and-authorization](https://)\n\n[Note:](https://) Token should be kept secret\n\n## Collection of requests\n\n#### Happy path\n\n1. Create a new board\n2. Get our member's data\n3. Get Boards that Member behind to\n4. Get all lists on the board\n5. Create a new list Delay\n6. Create a new card in To Do list\n7. Get all cards on the To Do list\n8. Undate contents of the card\n9. Add a member to the card\n10. Get the member of the card\n11. Create checklists in the card\n12. Move all cards from To Do list to Doing list\n13. Get all cards on the Doing list\n14. Add a new comment to the card\n15. Delete the board\n    \n\n#### Negative testing\n\n1. Getting deleted board\n    \n\n##### Missing authentication\n\n- Missing token\n    \n\n1. Create a new board\n    \n\n- Invalid token\n    \n\n1. Create a new board\n    \n\n##### Duplication of activities\n\n1. Adding the already added member to the card\n2. Moving cards that have been already moved all cards from To Do list to Doing\n3. Removing deleted board",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Happy path testing",
			"item": [
				{
					"name": "Create a new board",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01786b45-f8c1-4265-acbb-3de71ab8ac9a",
								"exec": [
									"//Testing status code\r",
									"pm.test(\"New board has been created successfully\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"//Parse the json format response\r",
									"const response = pm.response.json();\r",
									"//Setting a collection variable the new created board id, and created by default 3 lists such as: \"To Do\", \"Doing\", \"Done\" included in\r",
									"pm.collectionVariables.set(\"boardId\", response.id);\r",
									"//Setting the name of the created board as a collection variable \"boardName\"\r",
									"pm.collectionVariables.set(\"boardName\", response.name);\r",
									"//The board is created and has appropriate properties\r",
									"pm.test(\"The created board has suitable properties\", () => {\r",
									"    //the name of board from response body is equel to the collection variable \"boardName\" \r",
									"    pm.expect(response.name).to.eql(pm.collectionVariables.get(\"boardName\"));\r",
									"    //the name of board from response body is equel to name has been provided to the query params name's field\r",
									"    pm.expect(response.name).to.be.contain(\"My board name\")\r",
									"    //the board needs to be open\r",
									"    pm.expect(response.closed).to.be.false;\r",
									"    //the url needs to include 'https://trello.com' path\r",
									"    pm.expect(response.url).to.include(\"https://trello.com\");\r",
									"\r",
									"});\r",
									"//Permission level to the board which is existed needs to be \"private\"\r",
									"pm.test(\"Permission level is private\", () => {\r",
									"    pm.expect(response.prefs.permissionLevel).to.eql(\"private\")\r",
									"});\r",
									"//Checking that calender's view type is disable\r",
									"pm.test(\"Calender's view type is disable, and represented as an object\", () => {\r",
									"    const calenderView = response.prefs.switcherViews.find((view) => view.viewType === \"Calendar\")\r",
									"    pm.expect(calenderView).to.be.an(\"object\");\r",
									"    pm.expect(calenderView.enabled).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c74bb3a2-e6d5-411f-8a43-5db3f5b026d6",
								"exec": [
									"//Creating dinamice name of board with adding to permanent part \"My board name\" a number started from 1\r",
									"//initialization variable \"boardNumber\" with assigning collection variable \"boardNumber\"\r",
									"let boardNumber = pm.collectionVariables.get(\"boardNumber\");\r",
									"if(isNaN(boardNumber)) {\r",
									"    boardNumber = 1;\r",
									"}\r",
									"//increasing number's name of board by addition \r",
									"//boardNumber++;\r",
									"//Setting a collection variable \"boardNumber\" with value of variable \"boardNumber\"\r",
									"pm.collectionVariables.set(\"boardNumber\", boardNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "694fad94-0efe-48ad-9ae9-e1901518d396",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{TrelloToken}}",
								"key": "token",
								"type": "string"
							}
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards?name=My board name {{boardNumber}}&desc=This created board has include a three lists such as: To Do, Doing, Done.&key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards"
							],
							"query": [
								{
									"key": "name",
									"value": "My board name {{boardNumber}}",
									"description": "REQUIRED. Type of data - string. The new name for the board. 1 to 16384 characters long."
								},
								{
									"key": "defaultLists",
									"value": "true",
									"description": "Type of data - boolean. Determines whether to add the default set of lists to a board (To Do, Doing, Done). It is ignored if idBoardSource is provided. Defealt: true.",
									"disabled": true
								},
								{
									"key": "desc",
									"value": "This created board has include a three lists such as: To Do, Doing, Done.",
									"description": "Type of data - string. A new description for the board, 0 to 16384 characters long"
								},
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							]
						},
						"description": "Creating a new board named: \"My board name 1\". The main part of the name \"My board name\" is permanent and provided in the field _name_ of _Query Params_ in the _Params_ section. The digit is created by scripts that are provided in the _Pre-request Script._ The initial character is \"1\". There are also existing scripts that allow changing the initial number by increasing the number if needed (these specific scripts are disregarded by comment signs in the current situation).\n\nThrough the process of creating the board, there are by default created additional 3 lists on the board: To Do, Doing, Done."
					},
					"response": []
				},
				{
					"name": "Get our member's data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57bdce44-18b0-4539-b489-01be41c95db4",
								"exec": [
									"//Testing status code\r",
									"pm.test(\"Getting our member's boards has been finished successfully. Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Parse the response JSON body\r",
									"    const response = pm.response.json();\r",
									"//Testing response body\r",
									"pm.test(\"Response body has an appropriate properties\", () => {\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"    pm.expect(response.fullName).to.be.a(\"string\");\r",
									"    pm.expect(response.confirmed).to.eql(true);\r",
									"    pm.expect(response.url).to.include(\"https://trello.com/\");\r",
									"});\r",
									"//Singing the Id of the member to the collection variable\r",
									"pm.collectionVariables.set(\"memberId\", response.id);\r",
									"console.log(response.id);\r",
									"//Singing the username of the member to the collection variable\r",
									"pm.collectionVariables.set(\"userNameOfTheMember\", response.username);\r",
									"//Testing cookie \"dsc\" is exist \r",
									"pm.test(\"Cookie dsc is present\", () => {\r",
									"    pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2e56d15f-9d0a-4d88-8d10-ce1983da0cc2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "96a3c8ed-6763-4b7c-af02-f4e61d02d7d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/members/me/?key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"members",
								"me",
								""
							],
							"query": [
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							]
						},
						"description": "Getting data about members of the board\n\nSending this request us to retrieve the data about members of the boards such as member's IDs and member's usernames. Then sign up these data to collection variables"
					},
					"response": []
				},
				{
					"name": "Get Boards that Member belongs to",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e47c3fe-817a-49fb-8b14-40604010865b",
								"exec": [
									"//Testing status code\r",
									"pm.test(\"Getting all board in the Workspace has been successful. Status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Parse the json format response\r",
									"const response = pm.response.json();\r",
									"//Counting an amount of boards in the Workspace\r",
									"console.log(response.length);\r",
									"//Creating variable which will represented all board in an array using map method which is iterative method\r",
									"const allBoardIds = response.map(allBoard => allBoard.id);\r",
									"//Setting collection variable for all boards listed in an array\r",
									"pm.collectionVariables.set('allBoardIds', allBoardIds);\r",
									"//Printing allBoardIds and type of it for debugging purposes\r",
									"console.log(allBoardIds);\r",
									"console.log(typeof pm.collectionVariables.get('allBoardIds'));\r",
									"//The last created board in an Organization\r",
									"pm.test(\"New board is created and inclused on the list of boards\", () => {\r",
									"    let ifBoardIsInWorkspace = false;\r",
									"    for(let i = 0; i<response.length; i++) {\r",
									"        if(response[i].id === pm.collectionVariables.get(\"boardId\")) {\r",
									"            console.log(\"Last created board is in Workspace\");\r",
									"            ifBoardIsInWorkspace = true;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(ifBoardIsInWorkspace).to.be.true;\r",
									"});\r",
									"//Testing cookie \"dsc\" is exist \r",
									"pm.test(\"Cookie dsc is present\", () => {\r",
									"    pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f8ada2e6-f190-4047-acb9-a3779cb35c8e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7e086665-4885-48d9-95c8-6956dc8fbdd7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/members/:id/boards?key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"members",
								":id",
								"boards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userNameOfTheMember}}",
									"description": "REQUIRED. Type of data - string. The ID or username of the member"
								}
							]
						},
						"description": "Retrieving lists of boards that the user is a member of.\n\nThe main idea of sending this request is to ensure that the last created board is on the list of boards that belong to the member. Setting up a collection variable that is represented by an array and contains all boards."
					},
					"response": []
				},
				{
					"name": "Get all lists on the board",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6ccc0a7-6e2b-4749-8790-9a817e88a2d6",
								"exec": [
									"//Testing status codes\r",
									"pm.test(\"All lists in the board have been retrieve successfully. Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Parse the json format response\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Assignment collection variables with all lists which will represented in the array retrieved in order from response body \r",
									"//Do list\r",
									"pm.collectionVariables.set(\"ToDoListId\", response[0].id);\r",
									"console.log(pm.collectionVariables.get(\"ToDoListId\"));\r",
									"//Doing list\r",
									"pm.collectionVariables.set(\"DoingListId\", response[1].id);\r",
									"console.log(pm.collectionVariables.get(\"DoingListId\"));\r",
									"//Done list\r",
									"pm.collectionVariables.set(\"DoneListId\", response[2].id);\r",
									"console.log(pm.collectionVariables.get(\"DoneListId\"));\r",
									"\r",
									"//Checking the new created list is included on lists of the board\r",
									"pm.test(\"Created lists are at the appropriate board\", () => {\r",
									"    let areNewListsAtBoard = false;\r",
									"    response.forEach((response) => {\r",
									"        if(response.idBoard === pm.collectionVariables.get(\"boardId\")) {\r",
									"            //console.log(\"All created lists are at the same board\")\r",
									"            areNewListsAtBoard = true;\r",
									"        }});\r",
									"    pm.expect(areNewListsAtBoard).to.be.true;\r",
									"});\r",
									"//Testing cookie \"dsc\" is exist \r",
									"pm.test(\"Cookie dsc is present\", () => {\r",
									"    pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7212f13f-8ea6-4efd-9c67-f391e2b2d5ec",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "60ad8f0e-513c-4729-9b88-aa2a24030905",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards/:id/lists?key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								":id",
								"lists"
							],
							"query": [
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{boardId}}",
									"description": "REQUIRED. Type of data - string. The id of the board represented by sequence of numbers."
								}
							]
						},
						"description": "Get all lists on the board\n\nGetting all lists: To Do, Doing, Done on the board and signing up these lists to collection variables"
					},
					"response": []
				},
				{
					"name": "Create a new list Delay",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfbbb573-dcca-4a1f-8549-c7e8baad3302",
								"exec": [
									"//Testing status codes\r",
									"pm.test(\"Status code 200 or 201. Delay list has been created succssefully\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"//Parse the json format response\r",
									"const response = pm.response.json()\r",
									"//Testing response body\r",
									"pm.test(\"Delay list should be created\", function () {\r",
									"    pm.expect(response.name).to.eql(\"Delay\");\r",
									"    pm.expect(response.closed).to.be.false;\r",
									"    pm.expect(response.idBoard).to.eql(pm.collectionVariables.get(\"boardId\"));\r",
									"});\r",
									"//Assigning new created list Delay to collection variable listDelayId\r",
									"pm.collectionVariables.set(\"listDelayId\", response.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "64ad947e-c9fb-44c6-82a5-bf03cc9fc923",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "283607eb-a94e-4f7c-a7b5-ba2fc1608fe4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/lists?idBoard={{boardId}}&name=Delay&pos=top&key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"lists"
							],
							"query": [
								{
									"key": "idBoard",
									"value": "{{boardId}}",
									"description": "REQUIRED. The long ID of the board the list should be created on"
								},
								{
									"key": "name",
									"value": "Delay",
									"description": "REQUIRED. Type of data - string. The name of the list"
								},
								{
									"key": "pos",
									"value": "top",
									"description": "Type of data - oneOf [number, string]. Position of the list. top, bottom, or a positive floating point number"
								},
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							]
						},
						"description": "Create a new list named Delay\n\nSending this request allows us to check the accuracy significant functionality of Trello to create a list on the board. Then ensure that the created list is on the accurate board."
					},
					"response": []
				},
				{
					"name": "Create a new card in To Do list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "371c494f-2f83-415d-8918-f341b9cc9321",
								"exec": [
									"//Testing status codes\r",
									"pm.test(\"The new card has been created successfully.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"//Parse the json format response\r",
									"const response = pm.response.json();\r",
									"//Setting a collection variable the new created board id\r",
									"pm.collectionVariables.set(\"cardId\", response.id);\r",
									"//Testing response body\r",
									"pm.test(\"The card has precise properties\", function () {\r",
									"    pm.expect(response.due).to.include(\"2023-06-28\");\r",
									"    pm.expect(response.closed).to.eql(false);\r",
									"    pm.expect(response.idList).to.eql(pm.collectionVariables.get(\"ToDoListId\"));\r",
									"    pm.expect(response.idBoard).to.eql(pm.collectionVariables.get(\"boardId\"));\r",
									"});\r",
									"pm.test(\"Created card has an accurate name\", () => {\r",
									"    pm.expect(response.name).to.be.a(\"string\")\r",
									"    pm.expect(response.name).to.match(/^Sign in to Trello account via the valid credentials/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ad2a7ec2-4aea-48fb-a367-9d19e15f3b8d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/cards?name=Sign in to Trello account via the valid credentials: email and password&pos=4.5&due=2023-06-28&start=2023-06-27&dueComplete=true&idList={{ToDoListId}}&key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"cards"
							],
							"query": [
								{
									"key": "name",
									"value": "Sign in to Trello account via the valid credentials: email and password",
									"description": "The name for the card. Type of data - string."
								},
								{
									"key": "pos",
									"value": "4.5",
									"description": "The position of the new card. top, bottom, or a positive float Type of data - oneOf [string, number]."
								},
								{
									"key": "due",
									"value": "2023-06-28",
									"description": "A due date for the card. Format: date"
								},
								{
									"key": "start",
									"value": "2023-06-27",
									"description": "The start date of a card, or null. Nullable: true, Format: date"
								},
								{
									"key": "dueComplete",
									"value": "true",
									"description": "Type of data - boolean."
								},
								{
									"key": "idList",
									"value": "{{ToDoListId}}",
									"description": "REQUIRED. The ID of the list the card should be created in."
								},
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							]
						},
						"description": "Create a new card named: \"Sign in to Trello account via a valid e-mail and password\" on the To Do list\n\nQuery parameters may also be replaced with a JSON request body instead."
					},
					"response": []
				},
				{
					"name": "Get  all cards on the To Do list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47740452-6cbe-458d-b900-ddb5277b3316",
								"exec": [
									"//Testing status codes\r",
									"pm.test(\"All cards on the list have been retrieved successfully.\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Parse the json format response\r",
									"const response = pm.response.json()\r",
									"//Checking the new created card is included on cards of the list\r",
									"pm.test(\"Created card is on the list\", () => {\r",
									"    //declare a variable which consist find method to find last created card to be in the list  \r",
									"    let order = response.find((card) => card.id === pm.collectionVariables.get(\"cardId\"));\r",
									"    //checking that received card is an object\r",
									"    pm.expect(order).to.be.an(\"object\");\r",
									"    //checking that card is found\r",
									"    pm.expect(order).to.exist;\r",
									"})\r",
									"//Testing response body\r",
									"pm.test(\"Response body has accurat properties\", function () {\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"})\r",
									"//Retrieving last cart from array\r",
									"const lastCard = response.pop();\r",
									"//Testing last appended card to the list\r",
									"pm.test(\"Last appended card has accurat properties\", () => {\r",
									"    pm.expect(lastCard).to.be.an(\"object\");\r",
									"    pm.expect(lastCard).to.haveOwnProperty(\"id\");\r",
									"    pm.expect(lastCard.id.length).to.be.above(0);\r",
									"    pm.expect(lastCard.closed).to.be.false;\r",
									"    pm.expect(lastCard.idBoard).to.eql(pm.collectionVariables.get(\"boardId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bec0c40b-5bdd-4748-b4b9-fe266dc58df9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/lists/:id/cards?key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"lists",
								":id",
								"cards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{ToDoListId}}",
									"description": "REQUIRED. The ID of the list."
								}
							]
						},
						"description": "Get all cards on the To Do list\n\nRetrieve cards on the To Do list and ensure that the last created card is on the list."
					},
					"response": []
				},
				{
					"name": "Update contents of the card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7265400c-582f-4c3f-b329-07796d9b56d3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9758653e-ed72-43a9-bb5d-adfbdcb392c4",
								"exec": [
									"//Testing status codes\r",
									"pm.test(\"The new card has been created successfully.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"//Parse the json format response\r",
									"const response = pm.response.json();\r",
									"//Testing response body\r",
									"pm.test(\"The card has updated properties precisely\", function () {\r",
									"    //pm.expect(response.idMembers).to.be.at.least(1);\r",
									"    pm.expect(response.start).to.be.null;\r",
									"    pm.expect(response.subscribed).to.eql(false);\r",
									"    pm.expect(response.closed).to.eql(false);\r",
									"    pm.expect(response.idList).to.eql(pm.collectionVariables.get(\"ToDoListId\"));\r",
									"    pm.expect(response.idBoard).to.eql(pm.collectionVariables.get(\"boardId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d70c164f-a63f-433e-8b17-07393c665205",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/cards/:id?start=null&key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"cards",
								":id"
							],
							"query": [
								{
									"key": "start",
									"value": "null",
									"description": "The start date of a card, or null. Nullable: true, Format: date"
								},
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								},
								{
									"key": "idLabels",
									"value": "Sign",
									"type": "text",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{cardId}}",
									"description": "REQUIRED. The ID of the Card."
								}
							]
						},
						"description": "Update the card named \"Sign in to Trello account via the valid credentials: email and password\"\n\nQuery parameters may also be replaced with a JSON request body instead\n\nThe start time is delayed so that the start date of the card is changed to the null value."
					},
					"response": []
				},
				{
					"name": "Add a member to the card",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a4c4001-07c3-4b9d-a8c1-dccb4ee8a3f6",
								"exec": [
									"//Testing status codes\r",
									"pm.test(\"The new member has been successfully added.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"//Parse the json format response\r",
									"const response = pm.response.json();\r",
									"//Testing response body in terms of appropreate edded a member to the card\r",
									"pm.test(\"The member is added properly\", function () {\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response).to.not.be.empty;\r",
									"    pm.expect(response[0].id).to.eql(pm.collectionVariables.get(\"memberId\"));\r",
									"});\r",
									"//Redirection to negative testing folder and the request \"Adding the already has been added member to the card\" to check that duplication of adding the same member will be failed\r",
									"postman.setNextRequest(\"Adding the already has been added member to the card\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0499be3e-b0cd-4373-a481-f3b2d646d883",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8c477d2f-361a-4dcc-b40d-97aa302cce28",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/cards/:id/idMembers?value={{memberId}}&key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"cards",
								":id",
								"idMembers"
							],
							"query": [
								{
									"key": "value",
									"value": "{{memberId}}",
									"description": "The ID of the Member to add to the card"
								},
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{cardId}}",
									"description": "REQUIRED. The ID of the Card."
								}
							]
						},
						"description": "Add a member to a card\n\nTo add a member to the card that has been created and used to provide the collection variable \"memberId\"\n\nAdditionally, in the section Tests is the request that sets the next request \"Adding the already has been added member to the card\" consists of the Negative testing folder."
					},
					"response": []
				},
				{
					"name": "Get the member of the card",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c49e93d1-92fd-4ee8-8a84-29fe98f08db7",
								"exec": [
									"//Testing status code\r",
									"pm.test(\"Data about added member to the card has been successful retrieved, Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Parse the json response format\r",
									"const response = pm.response.json();\r",
									"//Retrieving first object(which is single there) from the array\r",
									"const memberData = response.pop();\r",
									"//Testing last appended card to the list\r",
									"pm.test(\"Last appended card is an array and has only one object\", () => {\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    //testing response body that represented array has only one object with member's data\r",
									"    pm.expect(response.length).to.eql(0);\r",
									"});\r",
									"//Testing memberData body\r",
									"pm.test(\"Object represented data about member has an appropriate properties\", () => {\r",
									"    pm.expect(memberData).to.be.an(\"object\");\r",
									"    pm.expect(memberData).to.haveOwnProperty(\"id\");\r",
									"    pm.expect(memberData.id.length).to.be.above(0);\r",
									"    pm.expect(memberData).to.be.not.empty;\r",
									"    pm.expect(memberData.username).to.be.a(\"string\");\r",
									"    pm.expect(memberData.activityBlocked).to.eql(false);\r",
									"    pm.expect(memberData.avatarUrl).to.include(\"https://trello-members.s3.amazonaws.com/\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4766646b-e5f5-46b0-96be-2c457cf3b334",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/cards/:id/members?key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"cards",
								":id",
								"members"
							],
							"query": [
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{cardId}}",
									"description": "REQUIRED. The ID of the Card"
								}
							]
						},
						"description": "Get the members on a card\n\nIn order to ensure that the member has been added to the card."
					},
					"response": []
				},
				{
					"name": "Create checklists in the card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e871349e-2e4b-4750-98f3-ce0a9197b80f",
								"exec": [
									"/*\r",
									"//Declare and initilize the bugRepostIds variable with an environment variable with the same name\r",
									"let bugReportIds = pm.environment.get(\"bugReportIds\");\r",
									"if (!bugReportIds) {\r",
									"    bugReportIds = [\"ID 123\", \"ID 373\", \"ID 455\", \"ID 784\"];\r",
									"}\r",
									"pm.environment.set(\"bugReportIds\", bugReportIds);\r",
									"pm.environment.get(\"bugReportIds\");\r",
									"console.log(pm.environment.get(\"bugReportIds\"));\r",
									"//Retrieving first bug report id from array and assigning it to variable\r",
									"let firstBugReportId = bugReportIds.shift();\r",
									"console.log(firstBugReportId);\r",
									"//Setting value of firstBugReportId to collection variable with the same name\r",
									"pm.environment.set(\"firstBugReportId\", firstBugReportId);\r",
									"console.log(pm.environment.get(\"firstBugReportId\"));\r",
									"//Setting collection variable with value of variable bugReportIds after first value has been retrieved from array \r",
									"pm.environment.set(\"bugReportIds\", bugReportIds);\r",
									"console.log(pm.environment.get(\"bugReportIds\"));\r",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6925ce9d-8b01-4583-a682-c707917c7887",
								"exec": [
									"//Status code of the response\r",
									"pm.test(\"The checklist has been created successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Parse the json format response\r",
									"const response = pm.response.json(); \r",
									"//Checking an appropriative properties of response body\r",
									"//Response body is perpesented by nonempty object\r",
									"pm.test(\"Getting response body is an object and not empty\", () => {\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(Object.keys(response)).to.not.be.empty;\r",
									"});\r",
									"//Checking that properties of checklist is accurate and checklist is created in the expected card and the board as well\r",
									"pm.test(\"Properties of created checklist is appropriate\", () => {\r",
									"    pm.expect(response.id).to.be.not.empty;\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.idBoard).to.eql(pm.collectionVariables.get(\"boardId\"));\r",
									"    pm.expect(response.idCard).to.eql(pm.collectionVariables.get(\"cardId\"));\r",
									"});\r",
									"/*\r",
									"//Retrieving of renewed bugReportIds after request has been sent \r",
									"let bugReportIds = pm.environment.get(\"bugReportIds\");\r",
									"console.log(bugReportIds);\r",
									"//If-else statement does the function of executing creating checklists untill the variable bugReportIds will not have an id\r",
									"if(bugReportIds && bugReportIds.length > 0) {\r",
									"    postman.setNextRequest(\"Create checklists in the card\");\r",
									"    console.log(pm.info.requestName);\r",
									"} else {\r",
									"    postman.setNextRequest(\"Move all cards from To Do list to Doing\");\r",
									"    console.log(pm.info.requestName);\r",
									"};\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0e96c260-aba6-49b3-9ff8-3344677ee67b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "checklistName",
									"type": "file",
									"src": "three_value_BVA_data_to_test_checklist_name.json"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/1/cards/:id/checklists?name={&pos=top&token={{TrelloToken}}&key={{TrelloKey}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"cards",
								":id",
								"checklists"
							],
							"query": [
								{
									"key": "name",
									"value": "{",
									"description": "The name of the checklist"
								},
								{
									"key": "pos",
									"value": "top",
									"description": "The position of the checklist on the card. One of: top, bottom, or a positive number."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								},
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								}
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "This request is supposed to create a checklist by using an external data file on a card. The main idea of proceeding with external file is IDs."
					},
					"response": []
				},
				{
					"name": "Move all cards from To Do list to Doing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48d0776a-726f-4598-bbe1-2efbdfd7eb31",
								"exec": [
									"//Testing status codes\r",
									"pm.test(\"All cards have moved successfully.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"//Parse the json format response\r",
									"const response = pm.response.json();\r",
									"//Retrieving first object (which is single there) from response body represented by array\r",
									"const objectData = response.pop();\r",
									"console.log(objectData);\r",
									"//Testing response body in terms of appropreate edded a member to the card\r",
									"pm.test(\"The card is moved to the Doing list and has appropriate properties\", function () {\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(Object.keys(objectData)).to.not.be.empty;\r",
									"    pm.expect(objectData.idBoard).to.eql(pm.collectionVariables.get(\"boardId\"));\r",
									"    //All cards are in the Doing list\r",
									"    pm.expect(objectData.idList).to.eql(pm.collectionVariables.get(\"DoingListId\"));\r",
									"});\r",
									"//Setting the order of the next request as a repiting of the same action by sending request that located in the negative testing's folder\r",
									"postman.setNextRequest(\"Moving cards that have been already moved all cards from To Do list to Doing\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f83daaa0-38a9-4b4d-a752-cc04eaed3e58",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "298a5846-bea3-41f1-a8dc-87ed6733f1f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/lists/:id/moveAllCards?idBoard={{boardId}}&idList={{DoingListId}}&key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"lists",
								":id",
								"moveAllCards"
							],
							"query": [
								{
									"key": "idBoard",
									"value": "{{boardId}}",
									"description": "The ID of the board the cards should be moved to"
								},
								{
									"key": "idList",
									"value": "{{DoingListId}}",
									"description": "The ID of the list that the cards should be moved to"
								},
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{ToDoListId}}",
									"description": "The ID of the list"
								}
							]
						},
						"description": "Move all cards from To Do list to Doing list\n\nAdditionally, in the section Tests is the request that sets the next request \"Adding the already has been added member to the card\" consists of the Negative testing folder."
					},
					"response": []
				},
				{
					"name": "Get all cards on the Doing list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7ce2c66-0724-40c2-86e1-9a550dcc767d",
								"exec": [
									"//Testing status codes\r",
									"pm.test(\"All cards on the list have been retrieved successfully.\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Parse the json format response\r",
									"const response = pm.response.json()\r",
									"//Checking the new created card is included on cards of the list\r",
									"pm.test(\"Moved card is on the list\", () => {\r",
									"    //declare a variable which consist find method to find last moved card to be in the list  \r",
									"    let order = response.find((card) => card.id === pm.collectionVariables.get(\"cardId\"));\r",
									"    //checking that received card is included into object\r",
									"    pm.expect(order).to.be.an(\"object\");\r",
									"    //checking that card is found\r",
									"    pm.expect(order).to.exist;\r",
									"})\r",
									"//Testing response body\r",
									"pm.test(\"Response body has accurat properties\", function () {\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"})\r",
									"//Retrieving last cart from array\r",
									"const lastCard = response.pop();\r",
									"//Testing last moved card to the list\r",
									"pm.test(\"Last appended card has accurat properties\", () => {\r",
									"    pm.expect(lastCard).to.be.an(\"object\");\r",
									"    pm.expect(lastCard).to.haveOwnProperty(\"id\");\r",
									"    pm.expect(lastCard.id.length).to.be.above(0);\r",
									"    pm.expect(lastCard.closed).to.be.false;\r",
									"    pm.expect(lastCard.idList).to.eql(pm.collectionVariables.get(\"DoingListId\"));  \r",
									"    pm.expect(lastCard.idBoard).to.eql(pm.collectionVariables.get(\"boardId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8fe67542-cdd3-4da0-a52a-d2e7589eb635",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/lists/:id/cards?key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"lists",
								":id",
								"cards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{DoingListId}}",
									"description": "REQUIRED. List the cards in a list."
								}
							]
						},
						"description": "List the cards in a Doing list  \nChecking that cards have been moved to the Doing list"
					},
					"response": []
				},
				{
					"name": "Add a new comment to the card",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ce8c663-334c-4e55-93f7-f64cd56726b7",
								"exec": [
									"//Testing status codes\r",
									"pm.test(\"The new comment to the card has been added successfully.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"//Status code of the response\r",
									"pm.test(\"The checklist has been created successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Parse the json format response\r",
									"const response = pm.response.json(); \r",
									"//Checking an appropriative properties of response body\r",
									"pm.test(\"Getting response body is an object and not empty\", () => {\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(Object.keys(response)).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Properties of created checklist is appropriate\", () => {\r",
									"    pm.expect(response.id).to.be.not.empty;\r",
									"    pm.expect(response.data.text).to.be.a(\"string\");\r",
									"    pm.expect(response.memberCreator.id).to.eql(pm.collectionVariables.get(\"memberId\"));\r",
									"    pm.expect(response.data.board.id).to.eql(pm.collectionVariables.get(\"boardId\"));\r",
									"    pm.expect(response.data.list.id).to.eql(pm.collectionVariables.get(\"DoingListId\"));\r",
									"    pm.expect(response.data.card.id).to.eql(pm.collectionVariables.get(\"cardId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "654a213f-770b-48be-8a3e-89da82d6eec4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0270f61c-6418-486d-be04-d4b0834d3dcd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/cards/:id/actions/comments?text=Providing valid data from user story {{$randomInt}}&key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"cards",
								":id",
								"actions",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "Providing valid data from user story {{$randomInt}}",
									"description": "The comment. The type of data - string. Number of user story is generated by random value from 0 to 1000"
								},
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{cardId}}",
									"description": "REQUIRED. The ID of the Card. Type of data - string."
								}
							]
						},
						"description": "Add a new comment to the card"
					},
					"response": []
				},
				{
					"name": "Delete a board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a60b10ff-4bcf-4727-a41f-5c14e12d52a9",
								"exec": [
									"\r",
									"//In order to delete boards which would be stored in newly created collection variable in \"Get all board in Workspace\" request\r",
									"//in this specific case first send \"Create a new board\" request multiple times to create boards, then sent \"Get all board in Workspace\" request where will be created array with objects that represent boards and signed to allBoardIds collection variable.\r",
									"//Getting variable allBoardIds and signing array with board's objects to variable allBoardIds\r",
									"const allBoardIds = pm.collectionVariables.get(\"allBoardIds\")\r",
									"//Printing variable in console allBoardIds in debugging aim\r",
									"console.log(allBoardIds);\r",
									"//Assigning the last removed and retrieved element from array to variable currentBoardId\r",
									"let currentBoardId = allBoardIds.pop();\r",
									"//Printing variable in console allBoardIds in debugging aim\r",
									"console.log(currentBoardId);\r",
									"//Setting the varialbe currentBoardId to the collection variable currentBoardId\r",
									"pm.collectionVariables.set(\"currentBoardId\", currentBoardId);\r",
									"//After collection variable currentBoardId has been used in the request to delete actually this particular board, there is need to setting up allBoardIds collection variable one more time without last remaided belove board \r",
									"pm.collectionVariables.set(\"allBoardIds\", allBoardIds);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2e6ba65-3ed7-469e-88b8-a08c8de4ed51",
								"exec": [
									"//Testing status code\r",
									"pm.test(\"Board has been deleted successfully\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"//Testing response body\r",
									"pm.test(\"There is not existing board\", () => {\r",
									"    //Parse the json format response\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response._value).to.be.null;\r",
									"});\r",
									"//Redirection to negative testing folder and the request \"Removing deleted board\" to check that deleting the board that has been deleted successfully will be failed\r",
									"postman.setNextRequest(\"Removing deleted board\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "52bb22c1-49f1-4f9f-8119-acb67620cc0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards/:id?key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Provide your own Trello token"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{boardId}}",
									"description": "REQUIRED. Type of data - string. The id of the board represented by sequence of numbers."
								}
							]
						},
						"description": "There are two ways of using the request \"Delete a board\":\n\n1. The main reason for sending a current request is to delete the board with regard to the collection perspective, deleting the board that was created in the first request for collection called \"Create a new board\"\n    \n\nNOTE: To send this request there is no need to provide any changes. This case is set up as a default.\n\n1. Deleting boards one by one via sending the \"Delete a board\" request multiple times, if occurs the need to delete not just the last created board.\n    \n\nNOTE: Neither doesn't work from a collection perspective or doesn't allow deleting multiple boards at once.\n\nInstruction for the second way of using request the \"Delete a board\":\n\n1. Send the \"Get Boards in an Organization\" request first.\n    \n2. **Scripts in the** _**Pre-request Script**_ **section** are stored as comments are needed **in case if appears necessary to delete boards one by one** that were created before in Workspace. To execute this scenario - **delete the comment signs at the beginning \"/\\*\" and end of comments \"\\*/\" in Pre-request Script section**.\n    \n3. Go to the the Params section subsection Path Variables and change in value's field of id from \"boardId\" to \"currentBoardId\".\n    \n4. Send \"Delete a board\" as much time as it's needed. Until now, there are currently no boards in the Workspace when last board has been deleted. Getting status code 400 Bad Request and response body with following context \"invalid id\""
					},
					"response": []
				}
			],
			"id": "3bf8455c-44a5-428f-8da6-231decc84a68",
			"description": "For Trello API testing, the folder contains requests that explore the main features of the Trello project management tool. By using known appropriate inputs, such as valid data or proper API calls, the tests are designed to ensure that the API behaves as expected and provides the correct responses according to the [REST API documentation](). This helps verify that the primary functionalities of Trello's API work as intended and that the system can handle normal usage scenarios.",
			"auth": {
				"type": "bearer",
				"bearer": {}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ff8c280f-1f07-4fb5-ab08-309651f62ede",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fcac5579-f700-4701-9ac6-242686893434",
						"type": "text/javascript",
						"exec": [
							"//Testing header",
							"//Checking that a response header is present",
							"pm.test(\"Content-Type is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"//Checking that Content-Type header has a particular value",
							"pm.test(\"Content-Type header is a application/json\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"//Checking that Trello-Environment header is a \"Production\"",
							"pm.test(\"X-Trello-Environment header is a Production\", () => {",
							"  pm.expect(pm.response.headers.get('X-Trello-Environment')).to.eql('Production');",
							"});",
							"//Testing cookie \"preAuthProps\" is exist ",
							"pm.test(\"Cookie preAuthProps is present\", () => {",
							"    pm.expect(pm.cookies.has('preAuthProps')).to.be.true;",
							"});",
							"/*",
							"//Testing cookie \"preAuthProps\" has appropriate value  ",
							"pm.test(\"Cookie preAuthProps has proper value\", () => {",
							"    pm.expect(pm.cookies.get(\"preAuthProps\")).to.eql(\"s%3A61f6a14321c5f77bed29eaa1%3AisEnterpriseAdmin%3Dfalse.nUqXPUcAdIWwcSk4V4OlwuIDitoHd3B2ZTRuLmEY4RQ\")",
							"})",
							"*/"
						]
					}
				}
			]
		},
		{
			"name": "Negative testing",
			"item": [
				{
					"name": "Missing authentication",
					"item": [
						{
							"name": "Missing token",
							"item": [
								{
									"name": "Create a new board - missing token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fec99e67-4962-4dfc-b447-7d736877d85c",
												"exec": [
													"pm.environment.set(\"boardName\", getRandomBoardName());\r",
													"\r",
													"function getRandomBoardName () {\r",
													"    const boardName = \"My new board \" + parseInt(Math.random() * 10000);\r",
													"    console.log (boardName);\r",
													"    return boardName;\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4e9a07ca-8f38-4cc3-8600-96ed5fc7bf0f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2ff75d03-8c6d-4564-af33-1a3903678f47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{TrelloToken}}",
												"key": "token",
												"type": "string"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{base_url}}/1/boards/?key={{TrelloKey}}&token=&name={{boardName}}&defaultLabels=false&defaultLists=true&desc=Addition a new feature in main mane&prefs_background=lime",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"1",
												"boards",
												""
											],
											"query": [
												{
													"key": "key",
													"value": "{{TrelloKey}}",
													"description": "This is a application key, which Trello uses to identify the application making the request."
												},
												{
													"key": "token",
													"value": ""
												},
												{
													"key": "name",
													"value": "{{boardName}}"
												},
												{
													"key": "defaultLabels",
													"value": "false"
												},
												{
													"key": "defaultLists",
													"value": "true"
												},
												{
													"key": "desc",
													"value": "Addition a new feature in main mane"
												},
												{
													"key": "prefs_background",
													"value": "lime"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "2258ac39-45d7-49ab-a16a-a09ccfce784b",
							"description": "This folder consists only one request \"Create new board\" that has missing Trello token causes getting the response with status code 401 \"Unauthorized\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "09d34afe-bfff-4aac-989c-d03a526f9f75",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53310ae4-5352-45bf-a0ce-b2dd38af962e",
										"type": "text/javascript",
										"exec": [
											"//Testing status codes",
											"pm.test(\"The process of creating a new board has been finished unsuccessfully. Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"//Testing response body",
											"pm.test(\"Authorized permission is failed. Missing header\", function () {",
											"  pm.response.to.have.body(\"unauthorized permission requested\");",
											"});",
											"",
											"//Testing headers",
											"pm.test(\"Content-Type header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is text/plain\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "Invalid token",
							"item": [
								{
									"name": "Creating new board - invalid token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "932f51f8-a63b-45f0-94fd-8cc94e5ad73f",
												"exec": [
													"pm.environment.set(\"boardName\", getRandomBoardName());\r",
													"\r",
													"function getRandomBoardName () {\r",
													"    const boardName = \"My new board \" + parseInt(Math.random() * 10000);\r",
													"    return boardName;\r",
													"};"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3c22753f-d510-48e2-9cc9-827a0432a547",
												"exec": [
													"postman.setNextRequest(null);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b83533c1-08be-4b7a-8172-9dd267a01c2d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/1/boards/?key={{TrelloKey}}&token=aljraoi2093sijdf3849&name={{boardName}}&defaultLabels=false&defaultLists=true&desc=Addition a new feature in main mane&prefs_background=lime",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"1",
												"boards",
												""
											],
											"query": [
												{
													"key": "key",
													"value": "{{TrelloKey}}",
													"description": "This is a application key, which Trello uses to identify the application making the request."
												},
												{
													"key": "token",
													"value": "aljraoi2093sijdf3849"
												},
												{
													"key": "name",
													"value": "{{boardName}}"
												},
												{
													"key": "defaultLabels",
													"value": "false"
												},
												{
													"key": "defaultLists",
													"value": "true"
												},
												{
													"key": "desc",
													"value": "Addition a new feature in main mane"
												},
												{
													"key": "prefs_background",
													"value": "lime"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "c480097e-634b-4a8f-8bb5-2c6c73cc1f30",
							"description": "This folder consists only one request \"Create new board\" that has provided invalid Trello token that causes getting the response with status code 401 \"Unauthorized\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "853ccea0-00a1-4224-8f63-e9291d1ba333",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e5704f7b-032a-46b3-8996-5ccdcdbbcb30",
										"type": "text/javascript",
										"exec": [
											"//Testing status codes",
											"pm.test(\"The process of creating a new board has been finished unsuccessfully. Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"//Testing response body",
											"pm.test(\"Authorized permission is failed. Invalid token\", function () {",
											"  pm.response.to.have.body(\"invalid token\");",
											"});",
											"",
											"//Testing headers",
											"pm.test(\"Content-Type header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is text/plain\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
											"});",
											""
										]
									}
								}
							]
						}
					],
					"id": "3a502829-3401-4d36-9c3f-3feb7b4aaa83",
					"description": "This folder consists requests that have to check does missing Trello token or provided invalid token into request occur status code 401 \"Unauthorized\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f10fd060-65bb-4d38-babd-6051656095f7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "caeecdb7-e598-4cd2-8686-45c7c8dcf0b9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Duplication of activities",
					"item": [
						{
							"name": "Adding the already has been added member to the card",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a4c4001-07c3-4b9d-a8c1-dccb4ee8a3f6",
										"exec": [
											"//Testing status code\r",
											"pm.test(\"Bad request status code 400, because of member has been already added to the card ones successfully\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Testing response body\r",
											"pm.test(\"Authorized permission is failed. Missing header\", function () {\r",
											"  pm.response.to.have.body(\"member is already on the card\");\r",
											"});\r",
											"//Testing headers\r",
											"//The Content-Type header is used to indicate the media type of the resource. The media type is a string sent along with the file indicating the format of the file\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Testing the media type of Content-Type being a text/plain\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
											"});\r",
											"//Testing the Trello-Environment header which needs to be a \"Production\" \r",
											"pm.test(\"X-Trello-Environment header is a Production\", () => {\r",
											"  pm.expect(pm.response.headers.get('X-Trello-Environment')).to.eql('Production');\r",
											"});\r",
											"//Testing cookie \"dsc\" is exist \r",
											"pm.test(\"Cookie dsc is present\", () => {\r",
											"    pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
											"});\r",
											"/*\r",
											"//Testing cookie \"dsc\" has appropriate value\r",
											"pm.test(\"Cookie dsc has proper value\", () => {\r",
											"    pm.expect(pm.cookies.get(\"dsc\")).to.eql(\"656be3b1893be92b444fc2023aadbbfd3943918ee36173d840a5848143d950d7\")\r",
											"});\r",
											"*/\r",
											"//Testing cookie \"preAuthProps\" is exist \r",
											"pm.test(\"Cookie preAuthProps is present\", () => {\r",
											"    pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
											"});\r",
											"//Since the current has been sent the next request to send in the queue is \"Get the member of the card\" from the \"Happy path testing\" folder\r",
											"postman.setNextRequest(\"Get the member of the card\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0499be3e-b0cd-4373-a481-f3b2d646d883",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1ad54948-c9ac-4d7c-97d4-24ac899f181d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/1/cards/:id/idMembers?value={{memberId}}&key={{TrelloKey}}&token={{TrelloToken}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"1",
										"cards",
										":id",
										"idMembers"
									],
									"query": [
										{
											"key": "value",
											"value": "{{memberId}}",
											"description": "The ID of the Member to add to the card"
										},
										{
											"key": "key",
											"value": "{{TrelloKey}}",
											"description": "This is a application key, which Trello uses to identify the application making the request."
										},
										{
											"key": "token",
											"value": "{{TrelloToken}}",
											"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{cardId}}",
											"description": "REQUIRED. The ID of the Card."
										}
									]
								},
								"description": "Adding the member that already has been added to the card\n\nAfter the request \"Add a member to the card\" from the \"Happy path testing\" folder was sent current request aims to check that adding the same member to the card occurs in failure"
							},
							"response": []
						},
						{
							"name": "Moving cards that have been already moved all cards from To Do list to Doing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14499a66-bd30-44d4-9415-e6df46ea1151",
										"exec": [
											"//Testing status codes\r",
											"pm.test(\"All cards have moved successfully.\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Parse the json format response\r",
											"const response = pm.response.json();\r",
											"//Testing response body that should be define by empty array\r",
											"pm.test(\"No cards in the list to move for. The retrieved array is ampty\", function () {\r",
											"    pm.expect(response).to.be.an(\"array\");\r",
											"    pm.expect(Object.keys(response)).to.be.empty;\r",
											"});\r",
											"//Testing header\r",
											"//Checking that a response header is present\r",
											"pm.test(\"Content-Type is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Checking that Content-Type header has a particular value\r",
											"pm.test(\"Content-Type header is a application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"//Checking that Trello-Environment header is a \"Production\"\r",
											"pm.test(\"X-Trello-Environment header is a Production\", () => {\r",
											"  pm.expect(pm.response.headers.get('X-Trello-Environment')).to.eql('Production');\r",
											"});\r",
											"//Testing cookie \"dsc\" is exist \r",
											"pm.test(\"Cookie dsc is present\", () => {\r",
											"    pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
											"});\r",
											"/*\r",
											"//Testing cookie \"dsc\" has appropriate value\r",
											"pm.test(\"Cookie dsc has proper value\", () => {\r",
											"    pm.expect(pm.cookies.get(\"dsc\")).to.eql(\"656be3b1893be92b444fc2023aadbbfd3943918ee36173d840a5848143d950d7\")\r",
											"});\r",
											"*/\r",
											"//Testing cookie \"preAuthProps\" is exist \r",
											"pm.test(\"Cookie preAuthProps is present\", () => {\r",
											"    pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
											"});\r",
											"//Since testing of accurated response body has been done, next request should be sended \"Get all cards on the Doing list\" from happy path's folder to check that cards are in the Doing list\r",
											"postman.setNextRequest(\"Get all cards on the Doing list\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3a3cbb95-ba3c-49cb-857c-989a146c498c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "554771c3-dceb-49cb-bce1-3765e4170688",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/1/lists/:id/moveAllCards?idBoard={{boardId}}&idList={{DoingListId}}&key={{TrelloKey}}&token={{TrelloToken}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"1",
										"lists",
										":id",
										"moveAllCards"
									],
									"query": [
										{
											"key": "idBoard",
											"value": "{{boardId}}",
											"description": "REQUIRED. Type of data - string. The id of the board represented by sequence of characters."
										},
										{
											"key": "idList",
											"value": "{{DoingListId}}",
											"description": "The ID of the list that the cards should be moved to"
										},
										{
											"key": "key",
											"value": "{{TrelloKey}}",
											"description": "This is a application key, which Trello uses to identify the application making the request."
										},
										{
											"key": "token",
											"value": "{{TrelloToken}}",
											"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{ToDoListId}}",
											"description": "The ID of the list"
										}
									]
								},
								"description": "Moving cards that have been already moved all cards from To Do list to the Doing list\n\nAfter the request \"Move all cards from To Do list to Doing list\" from the \"Happy path testing\" folder was sent current request aims to check that moving cards is impossible because of luck"
							},
							"response": []
						},
						{
							"name": "Removing deleted board",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a60b10ff-4bcf-4727-a41f-5c14e12d52a9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c2e6ba65-3ed7-469e-88b8-a08c8de4ed51",
										"exec": [
											"//Testing status code\r",
											"pm.test(\"Board has been deleted successfully\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//Testing response body\r",
											"pm.test(\"Authorized permission is failed. Missing header\", function () {\r",
											"  pm.response.to.have.body(\"The requested resource was not found.\");\r",
											"});\r",
											"//Testing headers\r",
											"//The Content-Type header is used to indicate the media type of the resource. The media type is a string sent along with the file indicating the format of the file\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"//Testing the media type of Content-Type being a text/plain\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
											"});\r",
											"//Testing the Trello-Environment header which needs to be a \"Production\"\r",
											"pm.test(\"X-Trello-Environment header is a Production\", () => {\r",
											"  pm.expect(pm.response.headers.get('X-Trello-Environment')).to.eql('Production');\r",
											"});\r",
											"//Setting up the next request in the queue \"Getting deleted board\" to check that trail to get the board that has been deleted successfully will be failed\r",
											"postman.setNextRequest(\"Getting deleted board\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "23c62ff5-376e-4791-9869-6db39a71542d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/1/boards/:id?key={{TrelloKey}}&token={{TrelloToken}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"1",
										"boards",
										":id"
									],
									"query": [
										{
											"key": "key",
											"value": "{{TrelloKey}}",
											"description": "This is a application key, which Trello uses to identify the application making the request."
										},
										{
											"key": "token",
											"value": "{{TrelloToken}}",
											"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{boardId}}",
											"description": "REQUIRED. Type of data - string. The id of the board represented by sequence of numbers."
										}
									]
								},
								"description": "Removing deleted board\n\nThis request will be sent after the \"Delete a board\" from the \"Happy path testing\" folder has been sent successfully. So that the expected response will be the \"The requested resource was not found\" and status code 404 \"Not Found\"."
							},
							"response": []
						}
					],
					"id": "61f0096e-0ac3-4ff4-937f-f836fbb891f0",
					"description": "This folder consists a group of requests to test that after these requests have been sent that located in \"Happy path testing\" first time, while instant sending the same request will occur inappropriate response with status code 400 \"Bad Request\" or 404 \"Not Found\""
				},
				{
					"name": "Getting deleted board",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64148931-7432-432f-a9b2-c7598fea966f",
								"exec": [
									"//Testing status code\r",
									"pm.test(\"Testing for the deleted board. Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"//Checking that Content-Type header has a particular value\r",
									"pm.test(\"Content-Type header is a application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
									"});\r",
									"//Testing response body\r",
									"pm.test(\"The response body represents a message about not existed requested to deleted board\", () => {\r",
									"    pm.response.to.have.body(\"The requested resource was not found.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d2a0c96d-0c04-4d78-889f-31187315dfa3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "abf7053e-6a23-43b5-ad58-29a547b05b05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards/:id?key={{TrelloKey}}&token={{TrelloToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{TrelloKey}}",
									"description": "This is a application key, which Trello uses to identify the application making the request."
								},
								{
									"key": "token",
									"value": "{{TrelloToken}}",
									"description": "Trello's API uses token - based authentication to grant third-party applications access to the Trello API."
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{boardId}}",
									"description": "REQUIRED. Type of data - string. The id of the board represented by sequence of numbers."
								}
							]
						},
						"description": "Getting deleted board\n\nThis request aims to ensure that getting deleted board occurs an"
					},
					"response": []
				}
			],
			"id": "eb312d1a-7222-4305-b52a-1be840f4630e",
			"description": "Negative testing focuses on uncovering potential bugs, errors that may not have identified through positive testing (using valid imputs).\n\nThis section consists a couple of folders that checking behavior of system when it is subjected to invalid or unexpected inputs such us: missing authentication (token) or duplication of activities that cause occur an error messages.",
			"auth": {
				"type": "bearer",
				"bearer": {}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "042b649c-071e-45ed-ba5d-efda3abba6fa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "75ab4328-c2fc-4b41-9929-7dda4d1b8466",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": ""
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "093b284d-1d26-4d53-8e90-96b0e31c815a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "004af2d4-0d1f-4df4-95ee-8bed7ef6fbfc",
				"type": "text/javascript",
				"exec": [
					"//Performance testing",
					"pm.test(\"Response time is less than 3000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://api.trello.com"
		},
		{
			"key": "toolIds",
			"value": ""
		},
		{
			"key": "currentToolId",
			"value": ""
		},
		{
			"key": "ToDoListId",
			"value": ""
		},
		{
			"key": "DoingListId",
			"value": ""
		},
		{
			"key": "DoneListId",
			"value": ""
		},
		{
			"key": "allBoardIds",
			"value": []
		},
		{
			"key": "memberId",
			"value": ""
		},
		{
			"key": "currentBoardId",
			"value": ""
		},
		{
			"key": "listDoneID",
			"value": ""
		},
		{
			"key": "listDelayId",
			"value": ""
		},
		{
			"key": "cardId",
			"value": ""
		},
		{
			"key": "boardId",
			"value": ""
		},
		{
			"key": "boardNumber",
			"value": ""
		},
		{
			"key": "boardName",
			"value": ""
		},
		{
			"key": "idOrganization",
			"value": "Id of your organization",
			"type": "string"
		},
		{
			"key": "userNameOfTheMember",
			"value": "Your own user name"
		},
		{
			"key": "bugReportIds",
			"value": []
		},
		{
			"key": "firstBugReportId",
			"value": null
		}
	]
}